<head>
    <link href="@Url.Content("~/Content/home.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/threedetails.css")" rel="stylesheet" type="text/css" />
</head>

@model IEnumerable<ACETreasureHunt.Models.Team>

@{
    ViewBag.Title = "Details";
}

<div class="container abc">
    <h2 class="white">Details</h2>
    <!--    @if(Context.User.Identity.IsAuthenticated) {
        <button type="button" class="btn btn-primary btn-lg btn3d">
       @Html.ActionLink("Create New", "Create")
        </button>
        }
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>

        </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>

            <td>

                @if(Context.User.Identity.IsAuthenticated) {<button type="button" class="btn btn-primary btn-xs btn3d" style="color:aliceblue">@Html.ActionLink("Edit", "Edit", new { id = item.EventID })</button>
                <button type="button" class="btn btn-primary btn-xs btn3d" style="color:aliceblue">@Html.ActionLink("Details", "Details", new { id = item.EventID })</button>
                <button type="button" class="btn btn-primary btn-xs btn3d" style="color:aliceblue">@Html.ActionLink("Delete", "Delete", new { id = item.EventID })</button>
               }
            </td>
        </tr>
    }

    </table>-->

    <div class="pricing-table pricing-three-column row">
        <div class="plan col-sm-4 col-lg-4">
            <div class="plan-name-bronze">
                <h3>Teams</h3>
                <img class="ack" src="http://software.improve1.com/content/itpvt-team3.jpg" alt="myImagetitle" />
            </div>
            <ul>
                @foreach (var team in ViewBag.MyList)
                {
                    <li class="plan-feature">@team.Name</li>
                }

                <li class="plan-feature"><a href="#" class="btn btn-primary btn-plan-select" onclick="location.href='@Url.Action("Index", "Team")'"><i class="icon-white icon-ok"></i>Manage</a></li>
            </ul>
        </div>


        <div style="z-index:55;" class="plan col-sm-4 col-lg-4">
            <div class="plan-name-silver">
                <h3>Staffs</h3>
                <img class="ack" src="http://www.affordablesantafedentist.com/wp-content/uploads/2012/08/118251024.jpg" alt="myImagetitle" />
            </div>
            <ul>
                @foreach (var event2 in ViewBag.MyList2)
                {
                    <li class="plan-feature">@event2.Name</li>
                }

                <li class="plan-feature"><a href="#" class="btn btn-primary btn-plan-select" onclick="location.href='@Url.Action("Index", "Staff")'"><i class="icon-white icon-ok"></i>Manage</a></li>
            </ul>
        </div>
        <div class="plan col-sm-4 col-lg-4">
            <div class="plan-name-gold">
                <h3>PitStop</h3>
                <img class="ack" src="http://www.clipartkid.com/images/643/mail-the-author-at-mom-about-town-dvo-gmail-com-visit-www-PyeKRm-clipart.png" alt="myImagetitle" />
            </div>
            <ul>
                @foreach (var event3 in ViewBag.MyList3)
                {
                    <li class="plan-feature">@event3.PitStopName</li>
                }
                <li class="plan-feature"><a href="#" class="btn btn-primary btn-plan-select" onclick="location.href='@Url.Action("Index", "PitStop")'"><i class="icon-white icon-ok"></i>Manage</a></li>
            </ul>
        </div>
    </div>

    @foreach (var event2 in ViewBag.MyList2)
    {
        <div>@event2.Name</div>
    }
</div>


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>
        Mera Naksha
    </title>

    <link href="@Url.Content("~/Content/leaflet.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/leaflet-routing-machine.css")" rel="stylesheet" type="text/css" />
    <!--Leaflet-->
    <!--<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />-->
    <!--<script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script> -->
    <link rel="stylesheet" href="lib/leaflet/leaflet.css" />
    <link rel="stylesheet" href="lib/leaflet/routing/leaflet-routing-machine.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script type="text/javascript" src="~/Views/Event/lib/leaflet/leaflet.js"></script>
    <script type="text/javascript" src="~/Scripts/countries.js"></script>
    <script type="text/javascript" src="~/Views/Event/lib/leaflet/routing+/leaflet-routing-machine.js"></script>
    <script type="text/javascript" src="~/Views/Event/lib/leaflet/routing/lrm-graphhopper.js"></script>
    <style type="text/css">
        #map {
            width: 1000px;
            height: 400px;
        }

        .legend {
            background: white;
            line-height: 1.5em
        }

            .legend i {
                width: 5em;
                float: left
            }
    </style>
    <style>
        .map {
            position: absolute;
            width: 1000px;
            height: 400px;
        }
    </style>
</head>
<body>
    <h1>Naksha</h1>
    <form id="mapFormId">
        Distance :
        <input id="distanceBox" type="text" name="Fname">
    </form>
    <div id="map" class="map"></div>
    <script>
			<!-- Add countries in map -->
			var map = L.map('map').setView([43.8476,18.3564], 6);
			//var countriesLayer = L.geoJson(countries).addTo(map);

			<!-- Legends -->
			var legend = L.control({position : 'bottomright'});
			legend.onAdd = function(map){
				var div = L.DomUtil.create('div','legend');
				var labels = ["Teams", "Support staff", "Pitstop"];
				var grades = ['Green', 'Blue', 'Red'];
				div.innerHTML = '<div><b>Legend</b></div>';
				for( var i =0; i < grades.length; ++i)
				{
					div.innerHTML += '<i style ="background:' +
					grades[i] +'">&nbsp;&nbsp;</i>&nbsp;&nbsp;' +
					labels[i] + '<br/>';
				}
				return div;
			}
			legend.addTo(map);

			<!-- Add Markers in map -->
			var point1 = [43.86667, 18.566644];
			var point2 = [20.89963, 89.35665];
			var iconPoint2 = L.icon (
			{
				iconUrl:'MapMarker_Ball__Azure.png',
				iconSize: [20,20],
				iconAnchor : [22,94],
				popupAnchor : [-3,-76]
			});
			var point3 = [5.89963, 112.35665];
			var iconPoint3 = L.icon (
			{
				iconUrl:'MapMarker_Ball__Chartreuse.png',
				iconSize: [20,20],
				iconAnchor : [22,94],
				popupAnchor : [-3,-76]
			});
			var marker1 = L.marker(point1).addTo(map);
			var marker2 = L.marker(point2,{icon : iconPoint2}).addTo(map);
			var marker3 = L.marker(point3,{icon : iconPoint3}).addTo(map);

			<!-- Routing -- >
			var i = 0;
			var iTeam1Displace2 = 0;
			var iTeam1Displace3 = 0;
			var jTeam2Displace1 = 0;
			var jTeam2Displace2 = 0;
			var jTeam2Displace3 = 0;
			var kTeam3Displace1 = 0;
			var kTeam3Displace2 = 0;
			var kTeam3Displace3 = 0;
			var finish = 0;
			var routeControl = null;
			var coordArr = {} ;

			<!-- 1st way  From 1 to 2-- >
			var latitude1 = 1.3046014;
			var longitude1 = 103.7701238;
			var latitude2 = 1.2838627;
			var longitude2 = 103.8493554;
			var startMarker = L.marker([latitude1, longitude1], { draggable: false, title: '1'}).addTo(map);
			var endMarker = L.marker([latitude2, longitude2], { draggable: false }).addTo(map);

			var startMarkerTeam2 = L.marker([latitude1, longitude1], { draggable: false, title: '2'}).addTo(map);
			var startMarkerTeam3 = L.marker([latitude1, longitude1], { draggable: false, title: '3'}).addTo(map);

			<!-- 2nd way, From 2 to 3 -- >
			var routeControl2 = null;
			var coordArr2 = {} ;
			var latitude3 = 1.300599;
			var longitude3 = 103.8527043;
			var startMarker2 = L.marker([latitude2, longitude2], { draggable: false}).addTo(map);
			var endMarker2 = L.marker([latitude3, longitude3], { draggable: false}).addTo(map);

			<!-- 3rd way From 3 to 4-- >
			var routeControl3 = null;
			var coordArr3 = {} ;
			var latitude4 = 1.3075337;
			var longitude4 = 103.8609886;
			var startMarker3 = L.marker([latitude3, longitude3], { draggable: false}).addTo(map);
			var endMarker3 = L.marker([latitude4, longitude4], { draggable: false}).addTo(map);

			function routeImpl(){
			L.tileLayer( 'http://{s}.tile.osm.org/{z}/{x}/{y}{r}.png', {
				attribution: '© OpenStreetMap contributors'
			}).addTo(map);

			if ( null == routeControl ){
				//Create route control
				routeControl = L.Routing.control({
				waypoints: [
				L.latLng(latitude1, longitude1),
				L.latLng(latitude2, longitude2)
				],
				createMarker: function(i, waypoint, n){
					if ( 0 == i ){return startMarker;}
					return endMarker;
				},
				routeWhileDragging: true,
				router: L.Routing.graphHopper('49b2a42d-a150-46bc-9edc-e60a10a781fd')
				//geocoder: L.Control.Geocoder.nominatim()
			}).addTo(map);}

			if ( null == routeControl2 ){
				//Create route control
				routeControl2 = L.Routing.control({
				waypoints: [
				L.latLng(latitude2, longitude2),
				L.latLng(latitude3, longitude3)
				],
				createMarker: function(i, waypoint, n){
					if ( 0 == i ){return startMarker2;}
					return endMarker2;
				},
				routeWhileDragging: true,
				router: L.Routing.graphHopper('49b2a42d-a150-46bc-9edc-e60a10a781fd')
				//geocoder: L.Control.Geocoder.nominatim()
			}).addTo(map);}

			if ( null == routeControl3 ){
				//Create route control
				routeControl3 = L.Routing.control({
				waypoints: [
				L.latLng(latitude3, longitude3),
				L.latLng(latitude4, longitude4)
				],
				createMarker: function(i, waypoint, n){
					if ( 0 == i ){return startMarker3;}
					return endMarker3;
				},
				routeWhileDragging: true,
				router: L.Routing.graphHopper('49b2a42d-a150-46bc-9edc-e60a10a781fd')
				//geocoder: L.Control.Geocoder.nominatim()
			}).addTo(map);}
			// override

			routeControl.on('routesfound', function(e) {
			var routes = e.routes;
			var distance = routes[0].summary.totalDistance;
			$('#distanceBox').val(distance/1000);
			coordArr = routes[0].coordinates.slice();
			});

			routeControl2.on('routesfound', function(e) {
			var routes = e.routes;
			var distance = routes[0].summary.totalDistance;
			$('#distanceBox').val(distance/1000);
			coordArr2 = routes[0].coordinates.slice();
			});

			routeControl3.on('routesfound', function(e) {
			var routes = e.routes;
			var distance = routes[0].summary.totalDistance;
			$('#distanceBox').val(distance/1000);
			coordArr3 = routes[0].coordinates.slice();
			});
			setTimeout(displaceMarker, 2000);
			setTimeout(displaceMarkerTeam2, 2000);
			setTimeout(displaceMarkerTeam3, 2000);
			}

			var displaceMarker = function(){
				var newLatlng = L.latLng(coordArr[i].lat, coordArr[i].lng);
				if( !(newLatlng.equals(L.latLng(latitude2, longitude2)) ) )
				{
					startMarker.setLatLng(newLatlng);
					startMarker.addTo(map);
					//e.waypoints[0].latLng
					++i;
					console.log('i =',i);
					console.log('Random Number', Math.random());
					if ( 0 == finish ){
						setTimeout(displaceMarker, Math.random()*2500);
					}
					else{
						raceFinish;
					}
				}
				if( i == coordArr.length ){
					startMarker.setLatLng(L.latLng(latitude2, longitude2));
					startMarker.addTo(map);
					console.log('coordArr2.length',coordArr2.length);
					setTimeout(displaceMarker2, 500);
				}
			}

			var displaceMarker2 = function(){

				var newLatlng = L.latLng(coordArr2[iTeam1Displace2].lat, coordArr2[iTeam1Displace2].lng);
				if( !(newLatlng.equals(L.latLng(latitude3, longitude3)) ) )
				{
					startMarker.setLatLng(newLatlng);
					startMarker.addTo(map);
					//e.waypoints[0].latLng
					iTeam1Displace2 = iTeam1Displace2 + 1;
					console.log('iTeam1Displace2 =',iTeam1Displace2);
					console.log('Random Number', Math.random());
					if ( 0 == finish ){
						setTimeout(displaceMarker2, 1500);
					}
					else{
						raceFinish;
					}
				}
				if( iTeam1Displace2 == coordArr2.length ){
					startMarker.setLatLng(L.latLng(latitude3, longitude3));
					startMarker.addTo(map);
					console.log('coordArr3.length',coordArr3.length);
					setTimeout(displaceMarker3, 500);
				}

			}

			var displaceMarker3 = function(){


				var newLatlng = L.latLng(coordArr3[iTeam1Displace3].lat, coordArr3[iTeam1Displace3].lng);
				if( !(newLatlng.equals(L.latLng(latitude4, longitude4)) ) )
				{
					startMarker.setLatLng(newLatlng);
					startMarker.addTo(map);
					//e.waypoints[0].latLng
					++iTeam1Displace3;
					if ( 0 == finish ){
						setTimeout(displaceMarker3, 400);
					}
					else{
						raceFinish;
					}
				}
				if( iTeam1Displace3 == (coordArr3.length-1) ){
					finish = 1;
					console.log('Should Finish', finish);
					throw new Error("Something went badly wrong!");
				}
			}

			var displaceMarkerTeam2 = function(){
				var newLatlng = L.latLng(coordArr[jTeam2Displace1].lat, coordArr[jTeam2Displace1].lng);
				if( !(newLatlng.equals(L.latLng(latitude2, longitude2)) ) )
				{
					startMarkerTeam2.setLatLng(newLatlng);
					startMarkerTeam2.addTo(map);
					//e.waypoints[0].latLng
					++jTeam2Displace1;
					console.log('jTeam2Displace1 =',jTeam2Displace1);
					if ( 0 == finish ){
						setTimeout(displaceMarkerTeam2, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( jTeam2Displace1 == coordArr.length ){
					startMarkerTeam2.setLatLng(L.latLng(latitude2, longitude2));
					startMarkerTeam2.addTo(map);
					console.log('Team2 coordArr.length',coordArr.length);
					setTimeout(displaceMarker2Team2, Math.random()*1500);
				}
			}

			var displaceMarker2Team2 = function(){
				var newLatlng = L.latLng(coordArr2[jTeam2Displace2].lat, coordArr2[jTeam2Displace2].lng);
				if( !(newLatlng.equals(L.latLng(latitude3, longitude3)) ) )
				{
					startMarkerTeam2.setLatLng(newLatlng);
					startMarkerTeam2.addTo(map);
					//e.waypoints[0].latLng
					++jTeam2Displace2;
					console.log('Team2 displace 2 jTeam2Displace1 =',jTeam2Displace2);
					if ( 0 == finish ){
						setTimeout(displaceMarker2Team2, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( jTeam2Displace2 == coordArr2.length ){
					startMarkerTeam2.setLatLng(L.latLng(latitude3, longitude3));
					startMarkerTeam2.addTo(map);
					console.log('Team2 coordArr2.length',coordArr2.length);
					setTimeout(displaceMarker3Team2, Math.random()*1500);
				}
			}

			var displaceMarker3Team2 = function(){
				var newLatlng = L.latLng(coordArr3[jTeam2Displace3].lat, coordArr3[jTeam2Displace3].lng);
				if( !(newLatlng.equals(L.latLng(latitude4, longitude4)) ) )
				{
					startMarkerTeam2.setLatLng(newLatlng);
					startMarkerTeam2.addTo(map);
					//e.waypoints[0].latLng
					++jTeam2Displace3;
					console.log('jTeam2Displace3 =',jTeam2Displace3);
					if ( 0 == finish ){
						setTimeout(displaceMarker3Team2, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( jTeam2Displace3 == (coordArr3.length-1) ){
					finish = 1;
					startMarkerTeam2.setLatLng(L.latLng(latitude4, longitude4));
					startMarkerTeam2.addTo(map);
					console.log('Team2 coordArr3.length jTeam2Displace1', coordArr3.length);
					raceFinish;
				}
			}

			// Team 3 Displacement 1
			var displaceMarkerTeam3 = function(){
				var newLatlng = L.latLng(coordArr[kTeam3Displace1].lat, coordArr[kTeam3Displace1].lng);
				if( !(newLatlng.equals(L.latLng(latitude2, longitude2)) ) )
				{
					startMarkerTeam3.setLatLng(newLatlng);
					startMarkerTeam3.addTo(map);
					//e.waypoints[0].latLng
					++kTeam3Displace1;
					console.log('kTeam3Displace1 =',kTeam3Displace1);
					if ( 0 == finish ){
						setTimeout(displaceMarkerTeam3, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( kTeam3Displace1 == coordArr.length ){
					startMarkerTeam3.setLatLng(L.latLng(latitude2, longitude2));
					startMarkerTeam3.addTo(map);
					console.log('Team2 coordArr.length',coordArr.length);
					setTimeout(displaceMarker2Team3, Math.random()*1500);
				}
			}
			//Team 3 Displacement 2
			var displaceMarker2Team3 = function(){
				var newLatlng = L.latLng(coordArr2[kTeam3Displace2].lat, coordArr2[kTeam3Displace2].lng);
				if( !(newLatlng.equals(L.latLng(latitude3, longitude3)) ) )
				{
					startMarkerTeam3.setLatLng(newLatlng);
					startMarkerTeam3.addTo(map);
					//e.waypoints[0].latLng
					++kTeam3Displace2;
					console.log('Team2 displace 2 kTeam3Displace2 =',kTeam3Displace2);
					if ( 0 == finish ){
						setTimeout(displaceMarker2Team3, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( kTeam3Displace2 == coordArr2.length ){
					startMarkerTeam3.setLatLng(L.latLng(latitude3, longitude3));
					startMarkerTeam3.addTo(map);
					console.log('Team2 coordArr2.length',coordArr2.length);
					setTimeout(displaceMarker3Team3, Math.random()*1500);
				}
			}

			// Team 3 Displacement 3
			var displaceMarker3Team3 = function(){
				var newLatlng = L.latLng(coordArr3[kTeam3Displace3].lat, coordArr3[kTeam3Displace3].lng);
				if( !(newLatlng.equals(L.latLng(latitude4, longitude4)) ) )
				{
					startMarkerTeam3.setLatLng(newLatlng);
					startMarkerTeam3.addTo(map);
					//e.waypoints[0].latLng
					++jTeam2Displace3;
					console.log('kTeam3Displace3 =',kTeam3Displace3);
					if ( 0 == finish ){
						setTimeout(displaceMarker3Team3, Math.random()*1500);
					}
					else{
						raceFinish;
					}
				}
				if( kTeam3Displace3 == (coordArr3.length-1) ){
					finish = 1;
					startMarkerTeam3.setLatLng(L.latLng(latitude4, longitude4));
					startMarkerTeam3.addTo(map);
					console.log('Team2 coordArr3.length jTeam2Displace1', coordArr3.length);
					raceFinish;
				}
			}

			var raceFinish = function(){
				throw new Error("Race Finish!");
			}
			routeImpl();
    </script>
</body>
</html>

